package ru.team2.lookingforhouse.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.internal.verification.Times;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.team2.lookingforhouse.config.BotConfig;
import com.vdurmont.emoji.EmojiParser;
import ru.team2.lookingforhouse.model.UserCat;
import ru.team2.lookingforhouse.model.UserDog;
import ru.team2.lookingforhouse.repository.ReportCatRepository;
import ru.team2.lookingforhouse.repository.ReportDogRepository;
import ru.team2.lookingforhouse.repository.UserCatRepository;
import ru.team2.lookingforhouse.repository.UserDogRepository;

import java.util.ArrayList;

import static ru.team2.lookingforhouse.util.Constant.*;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class TelegramBotTest {
    @Mock
    private BotConfig botConfig;
    @Mock
    private UserCatRepository userCatRepository;
    @Mock
    private UserDogRepository userDogRepository;
    @Mock
    private ReportCatRepository reportCatRepository;
    @Mock
    private ReportDogRepository reportDogRepository;
    @Spy
    @InjectMocks
    private TelegramBot telegramBot;

    @Test
    public void handlesStartTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().setText("/start");
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, new Times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        String txtMsg = EmojiParser.parseToUnicode("–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏—é—Ç —Å–æ–±–∞–∫ üê∂  –∏–ª–∏ –∫–æ—à–µ–∫  üê±");
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(txtMsg);

    }

    @Test
    public void handlesDogCommandTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().setText("/dog");
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(userDogRepository).save(any(UserDog.class));
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?");
    }

    @Test
    public void handlesCatCommandTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().setText("/cat");
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(userCatRepository).save(any(UserCat.class));
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?");
    }

    @Test
    public void handlesCallVolunteerTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setFirstName("Name");
        update.getMessage().setText("/call_volunteer");
        update.getMessage().getChat().setId(123L);

        when(telegramBot.generateRandomChatId()).thenReturn(123L);
        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ Name. –ß–∞—Ç-–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - 123");
    }

    @Test
    public void handlesUnknownCommandTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setText("Any unknown command");
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    }

    @Test
    public void handlesAddressDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().setData(ADDRESS_DOG_BUTTON);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –ñ–ö –ò–Ω—Ñ–∏–Ω–∏—Ç–∏, –ö–∞–±–∞–Ω–±–∞–π –±–∞—Ç—ã—Ä–∞, 40, –ê—Å—Ç–∞–Ω–∞ 010000, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
                –¢–µ–ª–µ—Ñ–æ–Ω: +7 707 818 0770
                –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00
                """);
    }

    @Test
    public void handlesAddressCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(ADDRESS_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                —É–ª–∏—Ü–∞ –ë–µ–π–±–∏—Ç—à–∏–ª–∏–∫ 67, –ê—Å—Ç–∞–Ω–∞ 010000, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
                –¢–µ–ª–µ—Ñ–æ–Ω: +7 701 874 3939
                –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00
                """);
    }

    @Test
    public void handlesDrivingDirectionsDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DRIVING_DIRECTIONS_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(DRIVING_DIRECTIONS_DOG_LINK);
    }

    @Test
    public void handlesDrivingDirectionsCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DRIVING_DIRECTIONS_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(DRIVING_DIRECTIONS_CAT_LINK);
    }

    @Test
    public void safetyPrecautionsDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SAFETY_PRECAUTIONS_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å —Å–æ–±–∞–∫–∞–º–∏.
                –í –ø—Ä–∏—é—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫ –∏–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä.
                –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞–ª–∏—Ç–∫–∏ –≤–æ–ª—å–µ—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!
                –ù–µ –Ω–∞–¥–æ –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–≥–ª–∞–¥–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ —Å–µ—Ç–∫—É! –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –ø—Ä–∏—é—Ç–µ –æ—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ, —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ.\s
                –ù–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ–∑—Ç–∏ –∫ –æ—á–µ–Ω—å –ø–ª–∞—á–µ–≤–Ω—ã–º –∏ —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–º —Å–∏—Ç—É–∞—Ü–∏—è–º.
                –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–ø—É—Å—Ç–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö, —á—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏.\s
                –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!""");
    }

    @Test
    public void safetyPrecautionsCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SAFETY_PRECAUTIONS_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –∫–æ—à–∫–∞–º–∏.
                –û–±—â–∞—è—Å—å —Å –∫–æ—à–∫–∞–º–∏, –ø–æ–º–Ω–∏—Ç–µ –æ–± –∏—Ö –∂–µ–ª–∞–Ω–∏—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö.
                –ï—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–∏ —Å —Ä–µ–±–µ–Ω–∫–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–±–µ–Ω–∫—É –Ω–∞ —Å–≤–æ–µ–º –ø—Ä–∏–º–µ—Ä–µ –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ—à–∫–æ–π.
                –õ—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –¥–∞–∂–µ —Å–∞–º–æ–µ –ª–∞—Å–∫–æ–≤–æ–µ –∏ –ø—É—à–∏—Å—Ç–æ–µ, –∏–º–µ–µ—Ç –∫–æ–≥—Ç–∏ –∏ –∑—É–±—ã.
                –ü—Ä–∏–∫–∞—Å–∞–π—Ç–µ—Å—å –∫ –∫–æ—à–∫–∞–º –±–µ—Ä–µ–∂–Ω–æ. –î–≤–∏–≥–∞–π—Ç–µ—Å—å —Å–ø–æ–∫–æ–π–Ω–æ, –±–µ–∑ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π.
                –ù–µ –ø—É–≥–∞–π—Ç–µ –∫–æ—à–µ–∫ –∫—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∑–∫–∏–º–∏ –∑–≤—É–∫–∞–º–∏, –Ω–µ –±—Ä–æ—Å–∞–π—Ç–µ.
                –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —É—à–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –Ω–µ –¥–µ—Ä–≥–∞–π—Ç–µ –∑–∞ —à–µ—Ä—Å—Ç—å –∏ —Ö–≤–æ—Å—Ç.
                –ù–µ –∫–æ—Ä–º–∏—Ç–µ –∫–æ—à–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –ø—Ä–∏–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º–∏ —Å —Å–æ–±–æ–π. –£—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ –ª—É—á—à–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫.""");
    }

    @Test
    public void handlesCallVolunteerButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(CALL_VOLUNTEER_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);
        update.getCallbackQuery().getMessage().getChat().setFirstName("Name");

        when(telegramBot.generateRandomChatId()).thenReturn(123L);
        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ Name. –ß–∞—Ç-–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - 123");
    }

    @Test
    public void handlesDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(userDogRepository).save(any(UserDog.class));
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?");
    }

    @Test
    public void handlesCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(userCatRepository).save(any(UserCat.class));
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?");
    }

    @Test
    public void handlesInfoDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(INFO_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—é—Ç–µ");
    }

    @Test
    public void handlesInfoCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(INFO_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—é—Ç–µ");
    }

    @Test
    public void handlesToAdoptDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(TO_ADOPT_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ö–∞–∫ –≤–∑—è—Ç—å —Å–æ–±–∞–∫—É –∏–∑ –ø—Ä–∏—é—Ç–∞?");
    }

    @Test
    public void handlesToAdoptCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(TO_ADOPT_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ö–∞–∫ –≤–∑—è—Ç—å –∫–æ—Ç–∞ –∏–∑ –ø—Ä–∏—é—Ç–∞?");
    }

    @Test
    public void handlesRulesDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(RULES_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Å—Ç–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –≤–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö —É —Å–µ–±—è –∏–ª–∏ —É –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö —Å –≤–∞–º–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.
                2. –ß—Ç–æ–±—ã –Ω–∞–ª–∞–¥–∏—Ç—å –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Å–∏–∫–æ–º, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É, —É–≥–æ—Å—Ç–∏—Ç—å —Å–æ–±–∞—á—å–∏–º –ª–∞–∫–æ–º—Å—Ç–≤–æ–º, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∑—è—Ç—å –Ω–∞ —Ä—É–∫–∏. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø—Ä–∏–≤—ã–∫–Ω–µ—Ç –∏ –ø–æ–π–¥–µ—Ç –Ω–∞–≤—Å—Ç—Ä–µ—á—É. –í –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–∏–Ω–æ–ª–æ–≥–∞ –∏–ª–∏ –∑–æ–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞.
                3. –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á—É–≤—Å—Ç–≤–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–∏–º.""");
    }

    @Test
    public void handlesRulesCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(RULES_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1.–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Å—Ç–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –≤–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö —É —Å–µ–±—è –∏–ª–∏ —É –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö —Å –≤–∞–º–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.
                2.–ß—Ç–æ–±—ã –Ω–∞–ª–∞–¥–∏—Ç—å –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ö–æ—Ç–∏–∫–æ–º –º–æ–∂–Ω–æ –ø—Ä–∏–∫–æ—Ä–º–∏—Ç—å –µ–≥–æ –∫–æ—à–∞—á—å–∏–º–∏ –≤–∫—É—Å–Ω—è—à–∫–∞–º–∏, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∑—è—Ç—å –Ω–∞ —Ä—É–∫–∏. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø—Ä–∏–≤—ã–∫–Ω–µ—Ç –∏ –ø–æ–π–¥–µ—Ç –Ω–∞–≤—Å—Ç—Ä–µ—á—É. –í –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∑–æ–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∞.
                3.–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á—É–≤—Å—Ç–≤–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–∏–º.""");
    }

    @Test
    public void handlesDocDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DOC_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –ü–∞—Å–ø–æ—Ä—Ç.
                2. –î–æ–≥–æ–≤–æ—Ä –∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π –º–µ–∂–¥—É –ø—Ä–∏—é—Ç–æ–º –∏ –Ω–æ–≤—ã–º —Ö–æ–∑—è–∏–Ω–æ–º
                3. –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –í–µ—Ç–ø–∞—Å–ø–æ—Ä—Ç.
                3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                4. –î–æ–∫—É–º–µ–Ω—Ç –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ —Å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º –ø—Ä–∏—é—Ç–∞.
                5. –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö.""");
    }

    @Test
    public void handlesDocCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DOC_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –ü–∞—Å–ø–æ—Ä—Ç.
                2. –î–æ–≥–æ–≤–æ—Ä –∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π –º–µ–∂–¥—É –ø—Ä–∏—é—Ç–æ–º –∏ –Ω–æ–≤—ã–º —Ö–æ–∑—è–∏–Ω–æ–º
                3. –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –í–µ—Ç–ø–∞—Å–ø–æ—Ä—Ç.
                3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                4. –î–æ–∫—É–º–µ–Ω—Ç –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ —Å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º –ø—Ä–∏—é—Ç–∞.
                5. –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö.""");
    }

    @Test
    public void handlesTransportationDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(TRANSPORTATION_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –ï—Å–ª–∏ —ç—Ç–æ –≤–∑—Ä–æ—Å–ª–∞—è —Å–æ–±–∞–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–≤–æ–¥–æ–∫ –∏ –æ—à–µ–π–Ω–∏–∫.
                2. –ï—Å–ª–∏ —ç—Ç–æ —â–∏–Ω–æ–∫ - –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤ –º–∞—à–∏–Ω–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –±—ã –ø–µ—Ä–µ–Ω–æ—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–∏—Å—Ç—ë–≥–Ω—É—Ç–∞ —Ä–µ–º–Ω—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
                3. –µ—Å–ª–∏ —ç—Ç–æ –≤–∑—Ä–æ—Å–ª–∞—è —Å–æ–±–∞–∫–∞, –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ –≥–∞–º–∞–∫""");
    }

    @Test
    public void handlesTransportationCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(TRANSPORTATION_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ç—ë–Ω–æ–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∫—É.
                2. –ü—Ä–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤ –º–∞—à–∏–Ω–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –±—ã –ø–µ—Ä–µ–Ω–æ—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–∏—Å—Ç—ë–≥–Ω—É—Ç–∞ —Ä–µ–º–Ω—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
                3. –î–ª—è –≤–∑—Ä–æ—Å–ª–æ–π –∫–æ—à–∫–∏ (–∫–æ—Ç–∞) —Ç–∞–∫ –∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–µ—Ä–µ–Ω–æ—Å–∫–∞""");
    }

    @Test
    public void handlesRecommendationPuppyButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(RECOMMENDATION_PUPPY_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–∫–∏ –Ω–∞ –∫—É—Ö–æ–Ω–Ω—ã–µ —à–∫–∞—Ñ—á–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ç–∞–º —Ö—Ä–∞–Ω—è—Ç—Å—è —á–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
                2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –±–∞—Ä—å–µ—Ä —á—Ç–æ –±—ã —Å–æ–±–∞–∫–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Ç—É–¥–∞, –∫—É–¥–∞ –µ–π –Ω–µ —Å–ª–µ–¥—É–µ—Ç.
                3. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–æ–º–µ —Ç–æ–∫—Å–∏–Ω–æ–≤ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∏—Ö –∫—É–¥–∞-–Ω–∏–±—É–¥—å –ø–æ–¥–∞–ª—å—à–µ.
                4. –î–µ—Ä–∂–∏—Ç–µ –¥–≤–µ—Ä—Ü—ã –¥—É—Ö–æ–≤–∫–∏, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –ø–µ—á–∏, —Å—É—à–∏–ª—å–Ω–æ–π –∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã–º–∏.
                5. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –∏ –±–µ–≥–∞—Ç—å, –Ω–µ —Ä–∏—Å–∫—É—è —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º.""");
    }

    @Test
    public void handlesRecommendationKittyButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(RECOMMENDATION_KITTY_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–∫–∏ –Ω–∞ –∫—É—Ö–æ–Ω–Ω—ã–µ —à–∫–∞—Ñ—á–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ç–∞–º —Ö—Ä–∞–Ω—è—Ç—Å—è —á–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
                2.–î–µ—Ä–∂–∏—Ç–µ –¥–≤–µ—Ä–∏ –≤ –¥–æ–º–µ –∑–∞–ø–µ—Ä—Ç—ã–º–∏ —á—Ç–æ –±—ã –∂–∏–≤–æ—Ç–Ω–æ–µ  –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Ç—É–¥–∞, –∫—É–¥–∞ –µ–º—É –Ω–µ —Å–ª–µ–¥—É–µ—Ç.
                3. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–æ–º–µ —Ç–æ–∫—Å–∏–Ω–æ–≤ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∏—Ö –∫—É–¥–∞-–Ω–∏–±—É–¥—å –ø–æ–¥–∞–ª—å—à–µ.
                4. –î–µ—Ä–∂–∏—Ç–µ –¥–≤–µ—Ä—Ü—ã –¥—É—Ö–æ–≤–∫–∏, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –ø–µ—á–∏, —Å—É—à–∏–ª—å–Ω–æ–π –∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã–º–∏.
                5. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –∏ –±–µ–≥–∞—Ç—å, –Ω–µ —Ä–∏—Å–∫—É—è —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º.
                6. –§–æ—Ä—Ç–æ—á–∫–∏ –≤ –æ–∫–Ω–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ç—è–Ω—É—Ç—ã–º–∏ –º–æ—Å–∫–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π, —á—Ç–æ –±—ã –∫–æ—à–∫–∞ –∏–ª–∏ –∫–æ—Ç –Ω–µ –≤—ã–ø–∞–ª–∏ –∏–∑ –æ–∫–Ω–∞ –≤ –ø–æ–≥–æ–Ω–µ –∑–∞ –ø—Ç–∏—Ü–µ–π.""");
    }

    @Test
    public void handlesRecommendationDogButton() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(RECOMMENDATION_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–∫–∏ –Ω–∞ –∫—É—Ö–æ–Ω–Ω—ã–µ —à–∫–∞—Ñ—á–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ç–∞–º —Ö—Ä–∞–Ω—è—Ç—Å—è —á–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
                2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –±–∞—Ä—å–µ—Ä —á—Ç–æ –±—ã —Å–æ–±–∞–∫–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Ç—É–¥–∞, –∫—É–¥–∞ –µ–π –Ω–µ —Å–ª–µ–¥—É–µ—Ç.
                3. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–æ–º–µ —Ç–æ–∫—Å–∏–Ω–æ–≤ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∏—Ö –∫—É–¥–∞-–Ω–∏–±—É–¥—å –ø–æ–¥–∞–ª—å—à–µ.
                4. –î–µ—Ä–∂–∏—Ç–µ –¥–≤–µ—Ä—Ü—ã –¥—É—Ö–æ–≤–∫–∏, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –ø–µ—á–∏, —Å—É—à–∏–ª—å–Ω–æ–π –∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã–º–∏.
                5. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –∏ –±–µ–≥–∞—Ç—å, –Ω–µ —Ä–∏—Å–∫—É—è —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º.""");
    }

    @Test
    public void handlesRecommendationCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(RECOMMENDATION_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–∫–∏ –Ω–∞ –∫—É—Ö–æ–Ω–Ω—ã–µ —à–∫–∞—Ñ—á–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ç–∞–º —Ö—Ä–∞–Ω—è—Ç—Å—è —á–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
                2.–î–µ—Ä–∂–∏—Ç–µ –¥–≤–µ—Ä–∏ –≤ –¥–æ–º–µ –∑–∞–ø–µ—Ä—Ç—ã–º–∏ —á—Ç–æ –±—ã –∂–∏–≤–æ—Ç–Ω–æ–µ  –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Ç—É–¥–∞, –∫—É–¥–∞ –µ–º—É –Ω–µ —Å–ª–µ–¥—É–µ—Ç.
                3. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–æ–º–µ —Ç–æ–∫—Å–∏–Ω–æ–≤ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –∏—Ö –∫—É–¥–∞-–Ω–∏–±—É–¥—å –ø–æ–¥–∞–ª—å—à–µ.
                4. –î–µ—Ä–∂–∏—Ç–µ –¥–≤–µ—Ä—Ü—ã –¥—É—Ö–æ–≤–∫–∏, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –ø–µ—á–∏, —Å—É—à–∏–ª—å–Ω–æ–π –∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—ã–º–∏.
                5. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –∏ –±–µ–≥–∞—Ç—å, –Ω–µ —Ä–∏—Å–∫—É—è —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º.
                6. –§–æ—Ä—Ç–æ—á–∫–∏ –≤ –æ–∫–Ω–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ç—è–Ω—É—Ç—ã–º–∏ –º–æ—Å–∫–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π, —á—Ç–æ –±—ã –∫–æ—à–∫–∞ –∏–ª–∏ –∫–æ—Ç –Ω–µ –≤—ã–ø–∞–ª–∏ –∏–∑ –æ–∫–Ω–∞ –≤ –ø–æ–≥–æ–Ω–µ –∑–∞ –ø—Ç–∏—Ü–µ–π.""");
    }

    @Test
    public void handlesRecHandicappedDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(REC_HANDICAPPED_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–æ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—é:
                –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∞–ø—ã, –ø–∞—Ä–∞–ª–∏—á –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –Ω–µ –∑–∞–±–∏—Ä–∞—é—Ç —É —Å–æ–±–∞–∫ –∏—Ö –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å. –¢–∞–∫–∏–º –ø–∏—Ç–æ–º—Ü–∞–º –Ω—É–∂–µ–Ω –æ—Å–æ–±—ã–π —É—Ö–æ–¥, –Ω–æ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ç–∞–∫–∏–µ —Å–æ–±–∞–∫–∏ –Ω–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –±–µ–≥–∞–µ—Ç –Ω–∞ —á–µ—Ç—ã—Ä–µ—Ö –ª–∞–ø–∞—Ö.
                –≠—Ç–æ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ, —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º, –Ω–µ –∏–º–µ–µ—Ç —à–∞–Ω—Å–æ–≤ –Ω–∞ —Å—á–∞—Å—Ç–ª–∏–≤—É—é –∂–∏–∑–Ω—å. –ï—Å–ª–∏ –¥–∞—Ç—å —Å–æ–±–∞–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–ª—è—Å–∫–∏, –æ–Ω–∞ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç —Ä–∞–∑–Ω–∏—Ü—É –∏ –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –±–µ–≥–∞—Ç—å –∑–∞ –∏–≥—Ä—É—à–∫–∞–º–∏ –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ—Ä–æ–¥–∏—á–∞–º–∏.
                –í —Ü–µ–ª–æ–º –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–æ–±–∞–∫ –Ω–∏—á–µ–º –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤. –•–æ–∑—è–∏–Ω—É –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ, —á—Ç–æ–±—ã –ø–∏—Ç–æ–º–µ—Ü –Ω–µ —É—Å—Ç–∞–ª –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏, –∏–≥—Ä—ã –∏–ª–∏ –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∏.
                –°–æ–±–∞–∫–∞–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∑–¥–æ—Ä–æ–≤—å—è, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –∑–∞–±–æ—Ç—ã, –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ª—é–±–≤–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ö–æ–∑—è–∏–Ω–∞. –ù–µ –Ω—É–∂–Ω–æ –∂–∞–ª–µ—Ç—å —Å–æ–±–∞–∫—É, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ –æ—Ä–≥–∞–Ω—ã —á—É–≤—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç –ø–∏—Ç–æ–º–µ—Ü.""");
    }

    @Test
    public void handlesRecHandicappedCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(REC_HANDICAPPED_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–æ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—é:
                –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∞–ø—ã, –ø–∞—Ä–∞–ª–∏—á –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –Ω–µ –∑–∞–±–∏—Ä–∞—é—Ç —É –∫–æ—à–µ–∫ –∏—Ö –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å. –¢–∞–∫–∏–º –ø–∏—Ç–æ–º—Ü–∞–º –Ω—É–∂–µ–Ω –æ—Å–æ–±—ã–π —É—Ö–æ–¥, –Ω–æ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ç–∞–∫–∏–µ –∫–æ—à–∫–∏ –Ω–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –±–µ–≥–∞–µ—Ç –Ω–∞ —á–µ—Ç—ã—Ä–µ—Ö –ª–∞–ø–∞—Ö.
                –ö–æ—Ç–∞–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∑–¥–æ—Ä–æ–≤—å—è, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –∑–∞–±–æ—Ç—ã, –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ª—é–±–≤–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ö–æ–∑—è–∏–Ω–∞. –ù–µ –Ω—É–∂–Ω–æ –∂–∞–ª–µ—Ç—å –∫–æ—à–∫—É, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ –æ—Ä–≥–∞–Ω—ã —á—É–≤—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç –ø–∏—Ç–æ–º–µ—Ü.""");

    }

    @Test
    public void handlesAdvicesCynologistsButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(ADVICES_CYNOLOGISTS_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                1. –ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π—Ç–µ —Å–æ–±–∞–∫–µ —Å–≤–æ—ë –æ–±—â–µ—Å—Ç–≤–æ.
                2. –ù–µ –º–µ—à–∞–π—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
                3. –ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ ‚Äú—Å–º–æ—Ç—Ä–∏–Ω—ã‚Äù.
                4. –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Å–æ–±–∞–∫–æ–π - –∫–æ—Ä–º–∏—Ç—å –µ—ë, –ø–æ–∏—Ç—å –≤–æ–¥–æ–π, –≥–ª–∞–¥–∏—Ç—å –∏–ª–∏ –∑–∞—Ç–∞—Å–∫–∏–≤–∞—Ç—å –≤ –≤–∞–Ω–Ω—É.
                5. –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å–æ —Å—Ç—Ä–∞—Ö–∞–º–∏ —Å–æ–±–∞–∫–∏, –¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ª–∞—Å–∫–æ–≤–æ.""");
    }

    @Test
    public void handlesCynologistsButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(CYNOLOGISTS_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–∏–Ω–æ–ª–æ–≥–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è:
                1.–¶–µ–Ω—Ç—Ä –∫–∏–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ñ–µ–ª–∏–Ω–æ–ª–æ–≥–∏–∏, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞, –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω"–ó–æ–æ—Å—Ñ–µ—Ä–∞".
                """);
    }

    @Test
    public void handlesVetCenterButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(VET_CENTER_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è:
                1.–í–µ—Ç –ö–ª–∏–Ω–∏–∫–∞ "–ó–æ–æ–ª—é–∫—Å".
                2.–ö–ª–∏–Ω–∏–∫–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã "–í–∏–∑–∞–Ω—Ç–∏—è".
                3.–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ "Astana".
                4.–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ "Aqtaban".""");
    }

    @Test
    public void handlesReasonsForRefusalButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(REASONS_FOR_REFUSAL_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É –º–æ–≥—É—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –∏ –Ω–µ –¥–∞—Ç—å –∑–∞–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ –ø—Ä–∏—é—Ç–∞:
                1. –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–æ–º–∞.
                2. –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ.
                3. –ù–∞–ª–∏—á–∏–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ—Ç–µ–π.
                4. –°—ä–µ–º–Ω–æ–µ –∂–∏–ª—å–µ
                5. –ñ–∏–≤–æ—Ç–Ω–æ–µ –≤ –ø–æ–¥–∞—Ä–æ–∫ –∏–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã.
                """);
    }

    @Test
    public void handlesSaveContactButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SAVE_CONTACT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–ß—Ç–æ–±—ã –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\"");
    }

    @Test
    public void handlesSubmitReportDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SUBMIT_REPORT_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("""
                        –û—Ç—á—ë—Ç –¥–ª—è –ø—Ä–∏—é—Ç–∞ —Å–æ–±–∞–∫:
                        –†–∞—Ü–∏–æ–Ω: –≤–∞—à —Ç–µ–∫—Å—Ç;
                        –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;
                        –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;""");
    }

    @Test
    public void handlesSubmitReportCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SUBMIT_REPORT_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("""
                        –û—Ç—á—ë—Ç –¥–ª—è –ø—Ä–∏—é—Ç–∞ –∫–æ—à–µ–∫:
                        –†–∞—Ü–∏–æ–Ω: –≤–∞—à —Ç–µ–∫—Å—Ç;
                        –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;
                        –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;""");
    }

    @Test
    public void saveContactTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SAVE_CONTACT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–ß—Ç–æ–±—ã –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\"");

    }

    @Test
    public void ifUpdateHasContactTest() throws TelegramApiException {
        Update update = new Update();
        update.hasMessage();
        update.setMessage(new Message());
        update.getMessage().setMessageId(1);
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);
        update.getMessage().setFrom(new User());
        update.getMessage().getFrom().setUserName("userNameTest");
        update.getMessage().setContact(new Contact());
        update.getMessage().getContact().setPhoneNumber("+79123456789");
        when(userDogRepository.findUserDogByChatId(123L)).thenReturn(new UserDog());

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–î–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏—é—Ç —Å–æ–±–∞–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    }

    @Test
    public void ifUpdateHasContactCatTest() throws TelegramApiException {
        Update update = new Update();
        update.hasMessage();
        update.setMessage(new Message());
        update.getMessage().setMessageId(1);
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);
        update.getMessage().setFrom(new User());
        update.getMessage().getFrom().setUserName("userNameTest");
        update.getMessage().setContact(new Contact());
        update.getMessage().getContact().setPhoneNumber("+79123456789");
        when(userCatRepository.findUserCatByChatId(123L)).thenReturn(new UserCat());

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–î–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏—é—Ç –∫–æ—à–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    }

    @Test
    public void ifUpdateHasPhotoAndCaptionDogTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);
        update.getMessage().setPhoto(new ArrayList<>());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().set(1,new PhotoSize());

        update.getMessage().setCaption("""
                            –û—Ç—á—ë—Ç –¥–ª—è –ø—Ä–∏—é—Ç–∞ —Å–æ–±–∞–∫:
                            –†–∞—Ü–∏–æ–Ω: –≤–∞—à —Ç–µ–∫—Å—Ç;
                            –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;
                            –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;""");
        when(userDogRepository.findUserDogByChatId(123L)).thenReturn(new UserDog());

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–í–∞—à –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–∏—é—Ç–∞ —Å–æ–±–∞–∫ –ø—Ä–∏–Ω—è—Ç! " +
                        "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ (30 –¥–Ω–µ–π)");
    }

    @Test
    public void ifUpdateHasPhotoAndCaptionCatTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);
        update.getMessage().setPhoto(new ArrayList<>());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().set(1,new PhotoSize());

        update.getMessage().setCaption("""
                            –û—Ç—á—ë—Ç –¥–ª—è –ø—Ä–∏—é—Ç–∞ –∫–æ—à–µ–∫:
                            –†–∞—Ü–∏–æ–Ω: –≤–∞—à —Ç–µ–∫—Å—Ç;
                            –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;
                            –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç;""");
        when(userCatRepository.findUserCatByChatId(123L)).thenReturn(new UserCat());

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–í–∞—à –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–∏—é—Ç–∞ –∫–æ—à–µ–∫ –ø—Ä–∏–Ω—è—Ç! " +
                        "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ (30 –¥–Ω–µ–π)");
    }

    @Test
    public void ifUpdateHasPhotoButHasNotCaption() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);
        update.getMessage().setPhoto(new ArrayList<>());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().add(new PhotoSize());
        update.getMessage().getPhoto().set(1,new PhotoSize());

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText())
                .isEqualTo("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —à–∞–±–ª–æ–Ω—É");
    }
}
